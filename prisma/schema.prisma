// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  email              String         @unique
  password           String
  fullname           String?
  profile            String?
  stripe_customer_id String
  transactions       Transactions[]
  interestIds        String[]       @db.ObjectId
  interests          Category[]     @relation(fields: [interestIds], references: [id])
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @default(now())
}

model Category {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  name              String     @unique
  parentId          String?
  parentCategory    Category?  @relation("CategoryParent", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  subCategory       Category[] @relation("CategoryParent")
  interestedUserIds String[]   @db.ObjectId
  interestedUsers   User[]     @relation(fields: [interestedUserIds], references: [id])
  productIds        String[]   @db.ObjectId
  products          Product[]  @relation(fields: [productIds], references: [id])
  image             String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @default(now())
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String     @unique
  description String?
  images      Json[]
  variants    Json?
  slideColors Json[]
  price       Float
  discount    Float?     @default(0)
  quantity    Int
  categoryIds String[]   @db.ObjectId
  category    Category[] @relation(fields: [categoryIds], references: [id])
  isStaffPick Boolean?   @default(false)
  isFeatured  Boolean?   @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
}

model Transactions {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  details       Json[]
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId
  transactionId String
  receiptUrl    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}
